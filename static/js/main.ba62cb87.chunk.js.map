{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClickSolvePuzzle","setState","solvePuzzle","state","handleClickNewPuzzle","newPuzzle","react_default","a","createElement","className","Segment","Group","horizontal","vertical","Button","fluid","onClick","build_default","maxIterations","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2TAsDeA,cAhDb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAORQ,uBAAyB,WACvBP,EAAKQ,SAAS,CAAEC,aAAcT,EAAKU,MAAMD,eATxBT,EAYnBW,qBAAuB,WACrBX,EAAKQ,SAAS,CAAEI,WAAYZ,EAAKU,MAAME,aAXvCZ,EAAKU,MAAQ,CACXD,aAAa,EACbG,WAAW,GAJIZ,wEAiBjB,OACEa,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACE,EAAA,EAAQC,MAAT,KACEL,EAAAC,EAAAC,cAACE,EAAA,EAAD,4BACAJ,EAAAC,EAAAC,cAACE,EAAA,EAAQC,MAAT,CAAeC,YAAU,GACvBN,EAAAC,EAAAC,cAACE,EAAA,EAAQC,MAAT,CAAeE,SAAS,QACtBP,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAQC,OAAK,EAACC,QAASpB,KAAKQ,sBAA5B,eAIFE,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAQC,OAAK,EAACC,QAASpB,KAAKI,wBAA5B,kBAKJM,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAACS,EAAAV,EAAD,CACEL,YAAaN,KAAKO,MAAMD,YACxBG,UAAWT,KAAKO,MAAME,UACtBa,cAAe,iBAvCbC,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpB,EAAAC,EAAAC,cAACmB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ba62cb87.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport SlidingTilePuzzle from \"react-sliding-tile-puzzle\";\nimport { Button, Segment } from \"semantic-ui-react\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      solvePuzzle: false,\n      newPuzzle: false\n    };\n  }\n\n  handleClickSolvePuzzle = () => {\n    this.setState({ solvePuzzle: !this.state.solvePuzzle });\n  };\n\n  handleClickNewPuzzle = () => {\n    this.setState({ newPuzzle: !this.state.newPuzzle });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Segment.Group>\n          <Segment>Sliding Tile Puzzle</Segment>\n          <Segment.Group horizontal>\n            <Segment.Group vertical=\"true\">\n              <Segment>\n                <Button fluid onClick={this.handleClickNewPuzzle}>\n                  New Puzzle\n                </Button>\n              </Segment>\n              <Segment>\n                <Button fluid onClick={this.handleClickSolvePuzzle}>\n                  Solve Puzzle\n                </Button>\n              </Segment>\n            </Segment.Group>\n            <Segment>\n              <SlidingTilePuzzle\n                solvePuzzle={this.state.solvePuzzle}\n                newPuzzle={this.state.newPuzzle}\n                maxIterations={300}\n              />\n            </Segment>\n          </Segment.Group>\n        </Segment.Group>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}